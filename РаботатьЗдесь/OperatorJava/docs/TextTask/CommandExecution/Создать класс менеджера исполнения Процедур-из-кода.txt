Это должна быть целая подсистема, одним классом тут не обойдешься.
Устройство:
- реализовать как подсистему Движка с функциями Init(),  Close(), ссылкой на объект Engine.
- должно содержать свою коллекцию Процедур и Мест, извлеченную из сборок Процедур.
- для исполнения команды эти коллекции из БД и из сборок процедур должны быть объединены и сортированы как требуется.
  - TODO: но при каждом изменении в БД ее коллекции заново читаются из БД. Как тут быть с ними ?
    - ?
  - TODO:  могут быть конфликты между сущностями из БД и из сборок Процедур. Как их разрешать?
    - ? 
  
Обязанности:
- перечислять сборки Процедурю
- перечислять Процедуры для указанной сборки Процедур.
- находить сборки Процедур в каталоге Оператор.
- загружать команды из сборок Процедур при старте Оператор.
- запускать инициализацию сборок команд при старте Оператор.
- запускать деинициализацию сборок команд при старте Оператор.
- Запускать Процедуру на исполнение.
- TODO: добавить тут обязанности подсистемы сборок Процедур.


Замечания:
- Оператор-1 путь к методу состоял из 3 частей: имя-сборки.имя-класса.имя-метода
 Тут же этих компонентов может потребоваться больше:
 - имя сборки  это имя jar-файла, который лежит в папке сборки, которая также называется этим же названием.
  Должно идти первым элементом строки пути метода.
   - но имя папки не имеет значения, его  можно получить в процессе поиска jar файлов при загрузке системы, и потом сопоставить название сборки и путь к jar-файлу сборки.
- имя метода - важная часть, должна идти последним элементом строки пути метода.
- имя класса - важная часть, должно идти предпоследним элементом строки пути метода.
- в промежутке между  первым и предпоследним элементом пути модуля может быть еще несколько, это имена пакетов внутри jar-файла.  
  - если пакет внутри проекта библиотеки процедур не назначен (default package), то в UrlLoader ClassLoader надо передавать только название класса, без пакетов.
    Так как считается, что класс там лежит - не принадлежит ни к какому пакету вообще. Сами же jar-файлы не считаются за пакеты.
    
 Библиотеку процедур надо разрабатывать из шаблона и по инструкции.
 - надо добавить в проект ссылку на БиблиотекуКодаДляПроцедур.  
 - надо добавить в проект ссылки на классы из OperatorJava, иначе код не скомпилится.
 - надо добавить  корневой пакет, названный так же, как название jar-файла (регистр символов имеет значение!), как первый элемент пути.
   - тогда этот корневой пакет надо включать в название класса для  UrlLoader ClassLoader в формате "пакет.класс" чтобы загрузить правильно.
   - в этот корневой пакет добавлять классы, в которых методы Процедур предстоит реализовывать.
   - если очень надо, можно добавить подпакеты, но я пока не знаю, зачем.
 - прочие пакеты рядом с корневым пакетом - не будут вызываться, так как имя jar файла = имя пакета,  это первый и единственный элемент.
   Но такие пакеты можно создавать для служебных целей кода внутри проекта библиотеки Процедур.  
 - еще, часть шаблона это заголовочный класс, его Оператор загружает, чтобы провести инициализацию библиотеки, выгрузку библиотеки, получение объектов Мест и Процедур из библиотеки.
   Сами Места и Процедуры должны в виде объектов передаваться Оператору. Классы объектов тоже берутся из  OperatorJava. 
   А как код библиотеки создает эти объекты - для Оператор несущественно: читает из файла ресурсов, из собственной БД, или просто все данные прописаны в коде.
   -  возможно, следует создать интерфейсы для всех классов, используемых в библиотеках Процедур, 
      поместить их в  БиблиотекуКодаДляПроцедур, чтобы напрямую на код OperatorJava не ссылаться
      в процессе разработки Библиотеки Процедур - чтобы он вообще не был в проекте Библиотеки Процедур.
      Так и движок целее будет, и порядка больше будет. А то как сейчас - есть соблазн в движке чего-нить подкрутить по-мелочи, чтобы облегчить себе задачу.
       Вот этого надо избегать, а то будет как линуксов - 40 разновидностей, и ни один не доделан, для работы не годится.
      - придется так и сделать, поскольку подключить к проекту библиотеки движок оказалось сложновато.
        Тогда надо разработать интерфейсы для всего, что используется из Библиотек Процедур сейчас.
        И внедрить эти интерфейсы в  БиблиотекуКодаДляПроцедур.
    - не, пока что надо простой способ без неймспейсов и интерфейсов реализовать - лишь бы заработало все уже сделанное.
      А потом переделать весь проект на правильную архитектуру с интерфейсаси и схемой-графом зависимостей, как положено.
      А то что-то сейчас многовато новых фич набралось в проект - это слишком сложно.        
       
       
   
    
 