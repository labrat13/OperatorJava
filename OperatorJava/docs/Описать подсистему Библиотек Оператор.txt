Описать подсистему Библиотек Оператор.
22.05.2022 12:47:00

Надо описать подсистему Библиотек Оператор, поскольку она новая и специально для этого релиза разработана.
- это прототип для отработки решения; архитектура создается и уточняется по ходу проекта; процесс осложнен переходом на ограниченный Java и мутный Linux.
- перспективная реализация проекта - как множество сервисов, которые можно разнести на разные машины сети: консоль как сервер, движок как сервер, несколько процессов-исполнителей как отдельные клиенты-процессы на разных серверах, итп. 
  - Эта вторая версия Оператор - катастрофически сложная для реализации на Java+Linux. Тем более, в одно лицо.
  - Сейчас надо сосредоточиться на выявлении способностей Оператор и его применении. Однако, потенциал идеи значительно нивелируется текущими возможностями разработчика, то есть, меня. 
- все библиотеки должны быть созданы по одной схеме.
- БД тоже желательно преобразовать в такую библиотеку.
- любую стороннюю БД можно дополнить адаптером и тоже превратить в библиотеку, подключив по интерфейсу библиотек.
- Библиотеки подключаются динамически во время загрузки.
  - однако конфликты (дубликаты) уникальных названий Мест и Процедур не разрешаются автоматически, и наличие такого конфликта сейчас прерывает процес загрузки Оператор.
  - Настройки не конфликтуют по названиям, но доступ к ним пока теоретически не проработан и практически не используется. 
- каждая библиотека содержит Менеджер, обеспечивающий ее загрузку, завершение и использование.
  - менеджер также служит местом привязки динамических ресурсов библиотеки, но пока эта возможность не используется.
    - но ссылка на менеджер уже передается в каждую Процедуру дл возможности такого использования.
  - менеджер должен загружаться в память процесса Оператор при старте и выгружаться при завершении.
    - и содержать собственный объект загрузчика классов Java на все время сеанса Оператор - но сейчас он создается динамически на каждое применение.
  - менеджер содержит функцию завершения и очистки, но Java программа типично завершается без гарантии такой очистки. Завершение и очистка вызываются только если пользователь закрывает Оператор командой Выход. Все имеющиеся в Java+Linux способы перехвата завершения процесса не позволяют корректно завершить работу Оператор, поскольку процесс может быть долгим. Поэтому рекомендуется всегда держать все ресурсы закрытыми либо под транзакциями, чтобы неожиданное завершение процесса не нанесло повреждений данным Оператор.
    - Оператор  при запуске может обнаруживать некорректное завершение предыдущего процесса, но в Библиотеки это событие не передается. Следует добавить в менеджер функцию восстановления данных после некоррекного завершения, вызываемую в процессе инициализации библиотеки. Или передавать флаг-аргумент для функции инициализации библиотеки. 


    

Сейчас интерфейс используется, работает, но остались недоделки:
 - очень много мелких недоделок разбросано по коду Оператор.
 - помимо Мест и Процедур, каждая Библиотека может передавать в Оператор Настройки. Сейчас это не реализовано.
 - БД Оператор имеет этот же функционал, но пока реализована самостоятельным модулем. Следует и ее реализовать как динамически подключаемую Библиотеку.
   - это приведет к переделке всей архитектуры, поскольку многие подсистемы можно реализовать с таким интерфейсом. Получится ядро-движок и стопка единообразных модулей-плагинов. Но следует отложить это на новый релиз, а до этого сейчас надо уточнять требования и процессы Оператор.
 - менеджер библиотек (PEM) простой и связан с классом кэша элементов и БД излишне сложно.
 - все Библиотеки сейчас считаются неспособными изменять хранящиеся в них Процедуры, Места и Настройки. Хотя это возможно, если реализовать их механизмы соответственно.
   Поэтому сейчас единственное место для хранения Процедур, Мест, Настроек, созданных пользователем, это БД.
 - Тексты Процедур излишне сложные, насыщены строками, которые надо вручную вводить, отмечают моменты запуска и завершения собственно кода Процедуры, корректного вывода названия метода.
   - классы-контейнеры Процедур можно бы объединить в общего предка, чтобы они имели стандартный набор сервисных функций, чтобы разгрузить от них код Процедур немного.
- Лог Оператор практически не используется. Записи добавляются бессистемно, основные моменты не отражены. Все процессы надо отражать в логе, но это все надо проектировать. Вероятно, сначала надо закончить текущие работы, а затем перепроектировать весь Оператор и заодно построить модель событий для Лога. Все-таки, это прототип, эксперимент. 

   
