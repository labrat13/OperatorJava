1.  Ctrl+C нельзя перехватить из кода и отменить, как в  винде.
2. Но можно обработать через addShutdownHook() подключив поток, который будет обрабатывать завершение.
- (это не точно) но он не может взаимодействовать с основным потоком, чтобы передавать в него сигнал.
   Он только может завершать и очищать ресурсы.
- поток не получает никакие причины своего запуска, невозможно узнать, что вызвало завершение работы.
3. можно отключить действие сигналов на виртуальную машину через настройки ява-машины.
- но сразу всех сигналов.
4. Рекомендуется перехватывать сигналы через стороннее АПИ Signal итп,
- но это не официальное АПИ, не включено в JDK, возможно и не работает.
- примера кода нет.
5. Можно наверно реализовать перехват сигналов на Си, но тогда уж лучше все приложение наисать на Си.
6. Дополнения к ява-машине могут сами навешивать свои ловушки на события и все это непредсказуемым образом исполняется.
7. Поскольку Линуксы все разные, работоспособность любого из методов не гарантируется нигде.
8. Виндовс выглядит намного более стабильной и удобной для таких программ, чем Линукс.
Поэтому переход на Линукс явно ухудшит перспективы моих проектов: повышает трудоемкость создания, усложняет реализацию, уменьшает функциональность.
9. Запускаемые из Оператор приложения оказываются дочерними к Оператор, и будут закрыты автоматически после завершения Оператор. 
  Это неочевидный факт, хотя Оператор, предполагается, будет постоянно работать, и вроде бы, это не проблема.
10. 
-----
Runtime.addShutdownHook(Thread hook)
public void addShutdownHook(Thread hook)

Registers a new virtual-machine shutdown hook. 
The Java virtual machine shuts down in response to two kinds of events: 

The program exits normally, when the last non-daemon thread exits or when the exit (equivalently, System.exit) method is invoked, or 

The virtual machine is terminated in response to a user interrupt, such as typing ^C, or a system-wide event, such as user logoff or system shutdown. 
A shutdown hook is simply an initialized but unstarted thread. When the virtual machine begins its shutdown sequence it will start all registered shutdown hooks in some unspecified order and let them run concurrently. When all the hooks have finished it will then run all uninvoked finalizers if finalization-on-exit has been enabled. Finally, the virtual machine will halt. Note that daemon threads will continue to run during the shutdown sequence, as will non-daemon threads if shutdown was initiated by invoking the exit method. 
Once the shutdown sequence has begun it can be stopped only by invoking the halt method, which forcibly terminates the virtual machine. 
Once the shutdown sequence has begun it is impossible to register a new shutdown hook or de-register a previously-registered hook. Attempting either of these operations will cause an IllegalStateException to be thrown. 
Shutdown hooks run at a delicate time in the life cycle of a virtual machine and should therefore be coded defensively. They should, in particular, be written to be thread-safe and to avoid deadlocks insofar as possible. They should also not rely blindly upon services that may have registered their own shutdown hooks and therefore may themselves in the process of shutting down. Attempts to use other thread-based services such as the AWT event-dispatch thread, for example, may lead to deadlocks. 
Shutdown hooks should also finish their work quickly. When a program invokes exit the expectation is that the virtual machine will promptly shut down and exit. When the virtual machine is terminated due to user logoff or system shutdown the underlying operating system may only allow a fixed amount of time in which to shut down and exit. It is therefore inadvisable to attempt any user interaction or to perform a long-running computation in a shutdown hook. 
Uncaught exceptions are handled in shutdown hooks just as in any other thread, by invoking the uncaughtException method of the thread's ThreadGroup object. The default implementation of this method prints the exception's stack trace to System.err and terminates the thread; it does not cause the virtual machine to exit or halt. 
In rare circumstances the virtual machine may abort, that is, stop running without shutting down cleanly. This occurs when the virtual machine is terminated externally, for example with the SIGKILL signal on Unix or the TerminateProcess call on Microsoft Windows. The virtual machine may also abort if a native method goes awry by, for example, corrupting internal data structures or attempting to access nonexistent memory. If the virtual machine aborts then no guarantee can be made about whether or not any shutdown hooks will be run. 
Parameters: 
hook - An initialized but unstarted Thread object 
Throws: 
IllegalArgumentException - If the specified hook has already been registered, or if it can be determined that the hook is already running or has already been run 
IllegalStateException - If the virtual machine is already in the process of shutting down 
SecurityException - If a security manager is present and it denies RuntimePermission("shutdownHooks") 
Since: 
1.3 
See Also: 
removeShutdownHook(java.lang.Thread), halt(int), exit(int) 
-----

removeShutdownHook

public boolean removeShutdownHook(Thread hook)

De-registers a previously-registered virtual-machine shutdown hook. 
Parameters: 
hook - the hook to remove 
Returns: 
true if the specified hook had previously been registered and was successfully de-registered, false otherwise. 
Throws: 
IllegalStateException - If the virtual machine is already in the process of shutting down 
SecurityException - If a security manager is present and it denies RuntimePermission("shutdownHooks") 
Since: 
1.3 
See Also: 
addShutdownHook(java.lang.Thread), exit(int) 
-----
