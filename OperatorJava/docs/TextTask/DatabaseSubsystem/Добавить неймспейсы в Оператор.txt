Неймспейсы штука полезная, но отложить ее на после релиза, а то проект и так уже запутался, надо сначала его почистить и перепроектировать.
   - неймспейсы пока не реализованы. Отложить это до релиза Оператора.
   - предлагается пока что завести неймспейсы как текстовые ключи для Мест и Процедур, а сортировать объекты по ним уже при загрузке в память.


Реализация:
- пока простая реализация: все элементы помечаем текстовым тегом-неймспейсом, а при выводе списка элементов сортируем их по этим неймспейсам, в плоское дерево. 
  И более ничего пока.

+ в класс Item добавить поле String m_namespace, и аксессоры для него.

+ в таблицы элементов  Бд добавить поле ns и в код адаптера тоже добавить это поле.
   + сделано, тестировано.
   
+ вывод списков элементов переделать  на вывод с неймспейсами.
   + класс DialogConsole должен выводить процедуры и места сортированно и по категориям, но сейчас нечем сортировать.:
     + PrintListOfProcedures() и PrintListOfPlaces() переделать.
   + тестировано!    
   
+ одинаковые названия мест все еще не допускаются? 
   + не допускаются в этом релизе Оператора одинаковые названия для Мест и Процедур, так как пользователю их придется указывать для выбора или удаления. 

+ загрузка элементов в библиотеках Процедур - тоже добавить это поле.

- добавить класс-список констант названий неймспейсов как пополняемый пользователем енум.
  + добавлен класс OperatorEngine.NamespaceConstants как набор констант названий неймспейсов.
  - тут надо шире: неймспейсы надо извлекать из коллекций сущностей и собирать в словарь, чтобы пользователь мог выбирать их, а не вводить наобум сам.
    - но и надо чтобы пользователь мог добавлять неймспейсы сам тоже.
    - надо как-то показывать пользователю этот список, чтобы он выбирал из него.
      - тогда нужны еще и описания неймспейсов также. Это получаются объекты неймспейсов, это сейчас слишком сложно.
        Надо отложить это на потом, а сейчас - просто внедрить текстовые поля, значения которых вводит создатель Процедуры или Места.
      - сейчас выводим существующие неймспейсы одной строкой их имен, подобно облаку тегов. Но список короткий, не впечатляет, пользователь не понимает, что это.  

+ команды создания и редактирования элементов - тоже добавить это поле.

- создать документ-справочник неймспейсов, чтобы самому не запутаться в них при указании в Процедурах, Местах, 
Настройках. 
  + создан docs/NamespacesReference.txt
  - надо добавить отовсюду в него справочные материалы по неймспейсам и их реализации.

- следует добавить служебную команду "показать неймспейсы" и в ней вывести существующие неймспейсы в виде таблицы.
  - код получения неймспейсов уже есть в ECM. Надо вывести их таблично. 

1. Добавление неймспейсов
+ в Item класс надо добавить поле String namespace
  + и аксессоры для него.
+ в таблицы БД надо добавить поле ns (TEXT)
  + сделать бекап проекта и Бд перед изменением.
  + добавить поля в скрипты создания БД, чтобы создать новую БД правильно. 
+ в функции БД надо добавить работу с этим полем для Procedure, Place, Setting объектов.
+ в ФайлНастроекОператора надо добавить вывод настроек, собранных в группы, по алфавиту.
  Группы выводить в стили INI-файла:  [группа] на одной строке, после нее - пункты группы.
  + тестировано!
+ в ФайлНастроекОператора надо добавить чтение групп из файла.
  + тестировано!
- в коллекции внутри PEM нужно добавить получение коллекции как списка списков или словаря списков для всех подклассов Item.
- в вывод Процедур и Мест в виде списка на консоль добавить указание неймспейса.
+ в вывод строки описания Процедур и Мест добавить вывод неймспейса.
   - сделано, но там получилось коряво, надо переделывать всю строку описания Сущности.
+ в процедуру создания Процедуры добавить ввод неймспейса для команды.
  + сделано.
+ в GeneralProcedures.LibraryManager  в функции создания объектов Процедур добавить заполнение поля namespace правильными значениями названий неймспейсов.
   + сделано.
- можно быстро сделать функцию или класс-коллекцию<Item>, которая будет собирать такое дерево, группированное по namespace, из обычного списка.
  И потом применять ее по месту, с приведением типа объекта.  
  Так будет проще пока что, чем добавлять в каждую коллекцию такую функцию.
  - это простой класс для всех объектов, производных от Item.
  - Это как SettingItemCollection, только грубее, и строка-ключ - не название настройки, а название неймспейса, подается отдельно от объекта.
    Поскольку ключ подается отдельно от объекта, то можно такой шаблонный класс коллекции применять как основу для других коллекций Оператора.
    То есть, как включаемый объект.
    А все приспособления делать в самом классе коллекции.
  - он должен иметь функцию получения массива/списка имен ключей, сортированных по алфавиту.
    И получения массива/списка объектов для каждого ключа, сортированный по алфавиту.
  - он должен иметь функцию наполнения из списка или массива объектов.
  - он должен иметь функцию добавления одного объекта, и все стандартные и востребованные использованием функции.
  - и из этого вышла куча переделок на 8 часов работы. Один новый класс, еще один новый класс, и куча изменений в остальных коллекциях. 
    Так что теперь надо перепроектировать всю архитектуру, чтобы избавиться от этих загогулин. Хотя оно работает, но сложность выросла и код неочевиден.    
      
      
- Но это все - только для категоризации объектов. Включать или исключать объекты по их категории это не позволит - надо переделывать архитектуру, чтобы код Оператор не запутался совершенно.
- Namespace позволяют иметь одноименные Команды и Места в разных неймспейсах и отбирать автоматически их из списка найденных вариантов по (Place.ns = Procedure.ns).
  - это перед запуском Процедуры нужен диалог, в котором пользователь должен из списка Мест выбрать правильное Место для исполнения Команды.
  - Этот диалог показывать при любом случае, когда найдено два и более одноименных Мест, без учета совпадения неймспейсов.
  - сейчас одноименные Места или Команды не поддерживаются в Оператор, поскольку идентификация и указание Команды и Места для операций над ним происходит по его Названию (Title).
  


  