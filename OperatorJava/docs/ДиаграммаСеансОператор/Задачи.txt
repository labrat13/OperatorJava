Задачи по этой теме:

1. Выписать все записи о ходе процесса в общий поток текстом, по пунктам, пронумеровать пункты.
- Выписывать версиями от простого к сложному, постепенно детализируя. 
- Отмечать версии в именах текстовых файлов.

4. Переделать класс Dialogs - сделать массивы слов загружаемыми из ФайлНастроекОператора
  В процессе инициализации загружать слова из настроек и парсить в массивы, массивы хранить в объекте Dialogs.
  - это будет уже подсистема диалогов, ее надо инициализировать и финишировать как все остальные подсистемы.
  - в эту подсистему не получится много функционала перенести, так что хватило бы и статического класса со статической функцией Init()
  + решено оставить только массив слов для встроенной команды Выход. Остальные встроенные команды решено заменить на обычные команды.

7. Составить СписокСобытий для ДиаграммыСеансаОператор.
- выполнить проверку и чистку списка событий.
- внести события в EnumLogMsgClass, коды событий указать в описании члена енума.

Выполненные задачи:

2. Составить список строк-ключей для фиксированных внутренних команд и настроек для них.
+ выполнено.
+ составить список объектов, которые надо прописывать в настройках, и придумать для них текстовые ключи.
+ написать код для работы с этими объектами и настройками через ключи.

3. реализовать код пред-обработки запроса
+ выполнено другим способом.
- реализовать как функцию, пригодную для последующего расширения списка фиксированных команд. 
- слова для пред-обработки загружать из ФайлНастроекОператора в процессе инициализации Оператора 
  и далее хранить в памяти как готовые массивы для быстрого использования.
  - Dialogs класс сейчас хранит их в коде.
- нужна функция, которая принимает запрос и возвращает строку-ключ, 
  если строка запроса соответствует одной из внутренних команд.
  То есть, возвращает ключ, если строка требует пред-обработки,
  и возвращает null, если строка - обычный запрос.
  Далее использовать эту функцию в процессе пред-обработки запроса.
  - тоже можно поместить это в класс Dialogs.



5. Перепроектировать подсистему Settings, оказалось, что она не готова для обслуживания процесса работы Оператор.
 + выполнено.
 + ТаблицаНастроекОператора добавлена в АдаптерБД, функции реализованы, не тестированы.
 + ФайлНастроекОператора:  функции реализованы, не тестированы.
 + SettingItemCollection как основной компонент для хранения настроек: функции реализованы, не тестированы..
 + Еще нужен объект кеш-коллекция настроек из БД, аналогичный ElementCacheManager, как компонент внутри Engine.
   + объединить его с ElementCacheManager? Тогда ECM будет просто кешем БД.
     + объединил, так проще пока что.
   - оставить самостоятельным? Тогда в нем очень много общего с ElementCacheManager.

6. ApplicationSettingBase переработать:
 + выполнено.
 + он должен задавать интерфейс для всех последующих реализации, включая XML-формат.
   + сделано, не тестировано.
 + он должен содержать коллекцию итемов SettingItemCollection.
   + сделано.
 = он должен содержать функции операций с настройками поверх SettingItemCollection, специальные для ФайлНастроекОператора.
   + сделано.
 + производный класс ApplicationSettingKeyed должен реализовывать хранение настроек в текстовом файле.
   + сделано.
   - поэтому шаблон названия файла должен задаваться в ApplicationSettingBase, но расширение - в производном классе, 
      поскольку расширение зависит от формата файла.
     - не получилось - в Engine.Init() код нужно переписывать на использование объекта, 
        а сейчас все так удобно реализовано на статической константе названия файла.
        Поэтому решено пока что ничего не менять, настройки так и будут в фиксированном названии setting.txt храниться
         для любого формата файла настроек.
         
 - а можно хранить настройки в отдельной sqlite БД, хотя это усложнение не окупится.
   - настройки нужны для того, чтобы их пользователь редактировал простым и доступным способом - в виде текстового файла.
     А БД - не такой простой способ для этого.
     Поэтому этот вариант не годится здесь.      
 + надо составить модель классов настроек: выписать на бумажку поля и функции, составить разделение по классам.
   А то я так ничего не начну - нет настроения.
   + сделано, выписал, а все равно не думается. Что-то сделал, почистил, бумажку выбросил.    
   
   
   
   